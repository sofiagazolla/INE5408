/* Copyright [2025] <Alexandre GonÃ§alves Silva> */
#include <stdexcept>
#include "gtest/gtest.h"
#include "./iniciais_complementares.h"

int main(int argc, char* argv[]) {
    std::srand(std::time(NULL));
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

//! comment
class TestesIniciaisComplementares: public ::testing::Test {
 protected:
    //! comment
    int M = 5;
    int N = 5;
};

TEST_F(TestesIniciaisComplementares, Minimo) {
    int **A = new int*[M];
    int **B = new int*[M];
    int **C = new int*[M];
    for (int i = 0; i < M; i++) {
        A[i] = new int[N];
        B[i] = new int[N];
        C[i] = new int[N];
    }
    A[0][0] = 30; A[0][1] = 50; A[0][2] = 30; A[0][3] = 70; A[0][4] = 20;
    A[1][0] = 40; A[1][1] = 80; A[1][2] = 20; A[1][3] = 20; A[1][4] = 10;
    A[2][0] = 30; A[2][1] = 40; A[2][2] = 70; A[2][3] = 20; A[2][4] = 90;
    A[3][0] = 60; A[3][1] = 90; A[3][2] = 80; A[3][3] = 40; A[3][4] = 60;
    A[4][0] = 20; A[4][1] = 10; A[4][2] = 40; A[4][3] = 30; A[4][4] = 50;
    B[0][0] = 30; B[0][1] = 40; B[0][2] = 70; B[0][3] = 30; B[0][4] = 40;
    B[1][0] = 20; B[1][1] = 90; B[1][2] = 90; B[1][3] = 80; B[1][4] = 20;
    B[2][0] = 50; B[2][1] = 20; B[2][2] = 10; B[2][3] = 90; B[2][4] = 10;
    B[3][0] = 60; B[3][1] = 10; B[3][2] = 20; B[3][3] =  5; B[3][4] = 50;
    B[4][0] = 10; B[4][1] = 80; B[4][2] = 60; B[4][3] = 30; B[4][4] = 80;
    C[0][0] = 30; C[0][1] = 40; C[0][2] = 30; C[0][3] = 30; C[0][4] = 20;
    C[1][0] = 20; C[1][1] = 80; C[1][2] = 20; C[1][3] = 20; C[1][4] = 10;
    C[2][0] = 30; C[2][1] = 20; C[2][2] = 10; C[2][3] = 20; C[2][4] = 10;
    C[3][0] = 60; C[3][1] = 10; C[3][2] = 20; C[3][3] =  5; C[3][4] = 50;
    C[4][0] = 10; C[4][1] = 10; C[4][2] = 40; C[4][3] = 30; C[4][4] = 50;
    ASSERT_EQ(10, minimo(A, M, N));
    ASSERT_EQ(5, minimo(B, M, N));
    for (int i = 0; i < M; i++) {
        delete [] A[i];
        delete [] B[i];
        delete [] C[i];
    }
    delete [] A;
    delete [] B;
    delete [] C;
}

TEST_F(TestesIniciaisComplementares, CoordenadaMenor) {
    int **A = new int*[M];
    int **B = new int*[M];
    int **C = new int*[M];
    for (int i = 0; i < M; i++) {
        A[i] = new int[N];
        B[i] = new int[N];
        C[i] = new int[N];
    }
    A[0][0] = 30; A[0][1] = 50; A[0][2] = 30; A[0][3] = 70; A[0][4] = 20;
    A[1][0] = 40; A[1][1] = 80; A[1][2] = 20; A[1][3] = 20; A[1][4] = 10;
    A[2][0] = 30; A[2][1] = 40; A[2][2] = 70; A[2][3] = 20; A[2][4] = 90;
    A[3][0] = 60; A[3][1] = 90; A[3][2] = 80; A[3][3] = 40; A[3][4] = 60;
    A[4][0] = 20; A[4][1] = 10; A[4][2] = 40; A[4][3] = 30; A[4][4] = 50;
    B[0][0] = 30; B[0][1] = 40; B[0][2] = 70; B[0][3] = 30; B[0][4] = 40;
    B[1][0] = 20; B[1][1] = 90; B[1][2] = 90; B[1][3] = 80; B[1][4] = 20;
    B[2][0] = 50; B[2][1] = 20; B[2][2] = 10; B[2][3] = 90; B[2][4] = 10;
    B[3][0] = 60; B[3][1] = 10; B[3][2] = 20; B[3][3] =  5; B[3][4] = 50;
    B[4][0] = 10; B[4][1] = 80; B[4][2] = 60; B[4][3] = 30; B[4][4] = 80;
    C[0][0] = 30; C[0][1] = 40; C[0][2] = 30; C[0][3] = 30; C[0][4] = 20;
    C[1][0] = 20; C[1][1] = 80; C[1][2] = 20; C[1][3] = 20; C[1][4] = 10;
    C[2][0] = 30; C[2][1] = 20; C[2][2] = 10; C[2][3] = 20; C[2][4] = 10;
    C[3][0] = 60; C[3][1] = 10; C[3][2] = 20; C[3][3] =  5; C[3][4] = 50;
    C[4][0] = 10; C[4][1] = 10; C[4][2] = 40; C[4][3] = 30; C[4][4] = 50;
    coord C1 = coordenada_menor(A, M, N);
    ASSERT_EQ(1, C1.x);
    ASSERT_EQ(4, C1.y);
    coord C2 = coordenada_menor(B, M, N);
    ASSERT_EQ(3, C2.x);
    ASSERT_EQ(3, C2.y);
    for (int i = 0; i < M; i++) {
        delete [] A[i];
        delete [] B[i];
        delete [] C[i];
    }
    delete [] A;
    delete [] B;
    delete [] C;
}

TEST_F(TestesIniciaisComplementares, MinimoMatrizes) {
    int **A = new int*[M];
    int **B = new int*[M];
    int **C = new int*[M];
    for (int i = 0; i < M; i++) {
        A[i] = new int[N];
        B[i] = new int[N];
        C[i] = new int[N];
    }
    A[0][0] = 30; A[0][1] = 50; A[0][2] = 30; A[0][3] = 70; A[0][4] = 20;
    A[1][0] = 40; A[1][1] = 80; A[1][2] = 20; A[1][3] = 20; A[1][4] = 10;
    A[2][0] = 30; A[2][1] = 40; A[2][2] = 70; A[2][3] = 20; A[2][4] = 90;
    A[3][0] = 60; A[3][1] = 90; A[3][2] = 80; A[3][3] = 40; A[3][4] = 60;
    A[4][0] = 20; A[4][1] = 10; A[4][2] = 40; A[4][3] = 30; A[4][4] = 50;
    B[0][0] = 30; B[0][1] = 40; B[0][2] = 70; B[0][3] = 30; B[0][4] = 40;
    B[1][0] = 20; B[1][1] = 90; B[1][2] = 90; B[1][3] = 80; B[1][4] = 20;
    B[2][0] = 50; B[2][1] = 20; B[2][2] = 10; B[2][3] = 90; B[2][4] = 10;
    B[3][0] = 60; B[3][1] = 10; B[3][2] = 20; B[3][3] =  5; B[3][4] = 50;
    B[4][0] = 10; B[4][1] = 80; B[4][2] = 60; B[4][3] = 30; B[4][4] = 80;
    C[0][0] = 30; C[0][1] = 40; C[0][2] = 30; C[0][3] = 30; C[0][4] = 20;
    C[1][0] = 20; C[1][1] = 80; C[1][2] = 20; C[1][3] = 20; C[1][4] = 10;
    C[2][0] = 30; C[2][1] = 20; C[2][2] = 10; C[2][3] = 20; C[2][4] = 10;
    C[3][0] = 60; C[3][1] = 10; C[3][2] = 20; C[3][3] =  5; C[3][4] = 50;
    C[4][0] = 10; C[4][1] = 10; C[4][2] = 40; C[4][3] = 30; C[4][4] = 50;
    minimo_matrizes(A, B, M, N);
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            ASSERT_EQ(C[i][j], A[i][j]);
        }
    }
    for (int i = 0; i < M; i++) {
        delete [] A[i];
        delete [] B[i];
        delete [] C[i];
    }
    delete [] A;
    delete [] B;
    delete [] C;
}

TEST_F(TestesIniciaisComplementares, Diagonal) {
    int **A = new int*[M];
    int **B = new int*[M];
    int **C = new int*[M];
    for (int i = 0; i < M; i++) {
        A[i] = new int[N];
        B[i] = new int[N];
        C[i] = new int[N];
    }
    A[0][0] = 30; A[0][1] = 50; A[0][2] = 30; A[0][3] = 70; A[0][4] = 20;
    A[1][0] = 40; A[1][1] = 80; A[1][2] = 20; A[1][3] = 20; A[1][4] = 10;
    A[2][0] = 30; A[2][1] = 40; A[2][2] = 70; A[2][3] = 20; A[2][4] = 90;
    A[3][0] = 60; A[3][1] = 90; A[3][2] = 80; A[3][3] = 40; A[3][4] = 60;
    A[4][0] = 20; A[4][1] = 10; A[4][2] = 40; A[4][3] = 30; A[4][4] = 50;
    B[0][0] = 30; B[0][1] = 40; B[0][2] = 70; B[0][3] = 30; B[0][4] = 40;
    B[1][0] = 20; B[1][1] = 90; B[1][2] = 90; B[1][3] = 80; B[1][4] = 20;
    B[2][0] = 50; B[2][1] = 20; B[2][2] = 10; B[2][3] = 90; B[2][4] = 10;
    B[3][0] = 60; B[3][1] = 10; B[3][2] = 20; B[3][3] =  5; B[3][4] = 50;
    B[4][0] = 10; B[4][1] = 80; B[4][2] = 60; B[4][3] = 30; B[4][4] = 80;
    C[0][0] = 30; C[0][1] = 40; C[0][2] = 30; C[0][3] = 30; C[0][4] = 20;
    C[1][0] = 20; C[1][1] = 80; C[1][2] = 20; C[1][3] = 20; C[1][4] = 10;
    C[2][0] = 30; C[2][1] = 20; C[2][2] = 10; C[2][3] = 20; C[2][4] = 10;
    C[3][0] = 60; C[3][1] = 10; C[3][2] = 20; C[3][3] =  5; C[3][4] = 50;
    C[4][0] = 10; C[4][1] = 10; C[4][2] = 40; C[4][3] = 30; C[4][4] = 50;
    int D1a[5] = {30, 80, 70, 40, 50};
    int *D1b = diagonal(A, N);
    for (int i = 0; i < N; i++) {
        ASSERT_EQ(D1a[i], D1b[i]);
    }
    int D2a[5] = {30, 90, 10, 5, 80};
    int *D2b = diagonal(B, N);
    for (int i = 0; i < N; i++) {
        ASSERT_EQ(D2a[i], D2b[i]);
    }
    for (int i = 0; i < M; i++) {
        delete [] A[i];
        delete [] B[i];
        delete [] C[i];
    }
    delete [] A;
    delete [] B;
    delete [] C;
    delete [] D1b;
    delete [] D2b;
}

TEST_F(TestesIniciaisComplementares, SomaColunas) {
    int **A = new int*[M];
    int **B = new int*[M];
    int **C = new int*[M];
    for (int i = 0; i < M; i++) {
        A[i] = new int[N];
        B[i] = new int[N];
        C[i] = new int[N];
    }
    A[0][0] = 30; A[0][1] = 50; A[0][2] = 30; A[0][3] = 70; A[0][4] = 20;
    A[1][0] = 40; A[1][1] = 80; A[1][2] = 20; A[1][3] = 20; A[1][4] = 10;
    A[2][0] = 30; A[2][1] = 40; A[2][2] = 70; A[2][3] = 20; A[2][4] = 90;
    A[3][0] = 60; A[3][1] = 90; A[3][2] = 80; A[3][3] = 40; A[3][4] = 60;
    A[4][0] = 20; A[4][1] = 10; A[4][2] = 40; A[4][3] = 30; A[4][4] = 50;
    B[0][0] = 30; B[0][1] = 40; B[0][2] = 70; B[0][3] = 30; B[0][4] = 40;
    B[1][0] = 20; B[1][1] = 90; B[1][2] = 90; B[1][3] = 80; B[1][4] = 20;
    B[2][0] = 50; B[2][1] = 20; B[2][2] = 10; B[2][3] = 90; B[2][4] = 10;
    B[3][0] = 60; B[3][1] = 10; B[3][2] = 20; B[3][3] =  5; B[3][4] = 50;
    B[4][0] = 10; B[4][1] = 80; B[4][2] = 60; B[4][3] = 30; B[4][4] = 80;
    C[0][0] = 30; C[0][1] = 40; C[0][2] = 30; C[0][3] = 30; C[0][4] = 20;
    C[1][0] = 20; C[1][1] = 80; C[1][2] = 20; C[1][3] = 20; C[1][4] = 10;
    C[2][0] = 30; C[2][1] = 20; C[2][2] = 10; C[2][3] = 20; C[2][4] = 10;
    C[3][0] = 60; C[3][1] = 10; C[3][2] = 20; C[3][3] =  5; C[3][4] = 50;
    C[4][0] = 10; C[4][1] = 10; C[4][2] = 40; C[4][3] = 30; C[4][4] = 50;
    int S1a[5] = {180, 270, 240, 180, 230};
    int *S1b = soma_colunas(A, M, N);
    for (int i = 0; i < N; i++) {
        ASSERT_EQ(S1a[i], S1b[i]);
    }
    int S2a[5] = {170, 240, 250, 235, 200};
    int *S2b = soma_colunas(B, M, N);
    for (int i = 0; i < N; i++) {
        ASSERT_EQ(S2a[i], S2b[i]);
    }
    for (int i = 0; i < M; i++) {
        delete [] A[i];
        delete [] B[i];
        delete [] C[i];
    }
    delete [] A;
    delete [] B;
    delete [] C;
    delete [] S1b;
    delete [] S2b;
}
